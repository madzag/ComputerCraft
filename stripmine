-- [ variables ] --

whitelist =
{
    "minecraft:diamond_ore",
    "minecraft:redstone_ore",
    "minecraft:lapis_ore",
    "minecraft:gold_ore",
    "minecraft:iron_ore",
    "minecraft:coal_ore"
}

invList =
{
    "minecraft:coal",
    "minecraft:redstone",
    "minecraft:lapis_lazuli",
    "minecraft:diamond"
}

length, width, returnY, info = ...
returnY = tonumber(returnY)
if width ~= nil then
    tunnelsPerLayer = math.floor(width/2-1)
end

valuableSlot = false
tunnelForward = true
depth = 0
yCoord = 0


-- [ functions ] --

-- "move + dig" functions
function goUp()
    turtle.digUp()
    checkFuel()
    turtle.up()
    depth = depth - 1
    yCoord = yCoord + 1
end

function goDown()
    turtle.digDown()
    checkFuel()
    turtle.down()
    depth = depth + 1
    yCoord = yCoord - 1
end

function goFwd()
    turtle.dig()
    checkFuel()
    turtle.forward()
end

-- look for empty slot
function invFull()
    for i=1, 16 do
        if turtle.getItemDetail(i) == nil then
            return false
        end
    end
    return true
end

-- drop non-whitelisted items
function invClean()
    for slot=1, 16 do
        turtle.select(slot)
        local inspectedItem = turtle.getItemDetail()
        if inspectedItem ~= nil then
            for i=1, #whitelist do
                if inspectedItem.name == whitelist[i] then
                    valuableSlot = true
                end
            end
            for i=1, #invList do
                if inspectedItem.name == invList[i] then
                    valuableSlot = true
                end
            end
        end
        if not valuableSlot then
            turtle.drop()
        end
        valuableSlot = false
    end
end

-- look for an item in inventory
function findItem(soughtItem)
    for slot=1, 16 do
        local inspectedItem = turtle.getItemDetail(slot)
        if inspectedItem ~= nil then
            if inspectedItem.name == soughtItem then
                return slot
            end
        end
    end
    return nil
end

-- if not enough fuel to return to surface, refuels once from last slot
-- if it cannot refuel, returns to surface
function checkFuel()
    if turtle.getFuelLevel() < depth-3 then
        coalSlot = findItem("minecraft:coal")
        if coalSlot ~= nil then
           turtle.select(coalSlot) 
        end
        turtle.refuel(1)
        if turtle.getFuelLevel() < depth-3 then
            print("Ran out of fuel")
            resurface()
            error()
        end
    end
end

-- checks if block below is bedrock
function checkBedrock()
    local temp, blockBelow = turtle.inspectDown()

    if blockBelow.name == "minecraft:bedrock" then
        return true
    else
        return false
    end
end

-- digs down to bedrock, then goes back up to input height
function digToBedrock()
    while checkBedrock() == false do
        goDown()
    end
    goUp()
    yCoord = 2
    invClean()
end

-- checks if the inspected block is whitelisted
function checkAndDig(inspectedBlock)
    if inspectedBlock ~= nil then
        for i=1, #whitelist do
            if inspectedBlock.name == whitelist[i] then
                return true
            end
        end
    end
end

-- digs, scans and strips a tunnel to input length
function tunnel(length)
    for lengthTraveled = 1, length-1 do
        temp, inspectedBlock = turtle.inspectUp()
        if checkAndDig(inspectedBlock) then turtle.digUp() end
        temp, inspectedBlock = turtle.inspectDown()
        if checkAndDig(inspectedBlock) then turtle.digDown() end
        turtle.turnLeft()
        temp, inspectedBlock = turtle.inspect()
        if checkAndDig(inspectedBlock) then turtle.dig() end
        turtle.turnRight()
        turtle.turnRight()
        temp, inspectedBlock = turtle.inspect()
        if checkAndDig(inspectedBlock) then turtle.dig() end
        turtle.turnLeft()
        goFwd()
    end
    invClean()
end

-- comes back to starting height + 3
function resurface()
    while depth > -2 do
        goUp()
    end
end

-- decides which way to turn
function sensitiveTurn(tunnelFwd)
    if tunnelFwd then
        turtle.turnRight()
    else
        turtle.turnLeft()
    end
end


-- [ program ] --

-- give syntax if no arguments are given
if length == nil then
    print("Arguments: length, width, returnY, [info]")
    error()
end

-- give info
if info ~= nil then
    print("Fuel needed: about", length+140+height*2, "units")
    print("(at least", math.floor((length+140+height*2)/80+1), "pieces of coal)")
    print("I have", turtle.getItemCount(16), "pieces of coal")
    error()
end

print("Stripping a", length, "by", width, "area...")

digToBedrock()

while yCoord < returnY do

    -- dig upwards layer
    for i=1, tunnelsPerLayer-1 do
        tunnel(length)

        -- move to next tunnel start
        sensitiveTurn(tunnelForward)
        for j=1, 2 do
            goFwd()
        end
        goUp()
        sensitiveTurn(tunnelForward)
        tunnelForward = not tunnelForward
    end
    tunnel(length)

    -- move up to downwards layer
    for i=1, 2 do
        goUp()
    end
    sensitiveTurn(not tunnelForward)
    goFwd()
    sensitiveTurn(not tunnelForward)
    tunnelForward = not tunnelForward

    -- dig downwards layer
    for i=1, tunnelsPerLayer-1 do
        tunnel(length)

        -- move to next tunnel start
        sensitiveTurn(not tunnelForward)
        for j=1, 2 do
            goFwd()
        end
        goDown()
        sensitiveTurn(not tunnelForward)
        tunnelForward = not tunnelForward
    end
    tunnel(length)

    -- move up to upwards layer
    for i=1, 3 do
        goUp()
    end
    sensitiveTurn(tunnelForward)
    goFwd()
    sensitiveTurn(tunnelForward)
    tunnelForward = not tunnelForward

end
resurface()
